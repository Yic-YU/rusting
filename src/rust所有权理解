rust的单一所有权：每个值只有一个所有者，并且只能有一个所有者，当所有者离开作用域，这个值就会被丢弃，这样就并不需要C++的垃圾回收，解决了悬垂引用的问题

内存管理方式，Rust采用资源获取就初始化的内存管理方式，大部分基本数据类型都存放在栈上，在使用String，Vector，Box，Hashmap内存会在堆上分配

堆上的数据赋值是move，move会将所有权转移，转移之前的变量就会被丢弃，存储在栈上的数据的一些如果实现了Copy trait，Copy操作就会创建一个完整的副本

不希望转移所有权，仅仅想临时访问一个值的时候，便可以借用，主要包括可变借用和不可变借用，在同一个作用域内只能使用一次可变借用，但可以任意数量的不可变借用

rust编译器由于过于严格的借用规则，在数据共享的时候，即使只有不可变引用，也可以对数据进行修改，将借用规则从编辑器推迟到了运行期，主要包括Mutex<T>,RwLock<T>,
RefCell<T>,Cell<T>.

